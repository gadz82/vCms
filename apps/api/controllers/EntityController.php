<?php
/**
 * Created by PhpStorm.
 * User: Francesco
 * Date: 15/04/2019
 * Time: 12:26
 */
class EntityController extends ApiController{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function readAction($id){

        $post_type = TipologiePost::query()
            ->innerJoin('Posts', 'p.id_tipologia_post = TipologiePost.id AND p.id = "'.$id.'" AND p.attivo = 1', 'p')
            ->cache([
                "key" => "apiReadTipologiaPost".$id,
                "lifetime" => 12400
            ])
            ->execute()
            ->getFirst();

        $post_type_slug = $post_type->slug;
        if(!$this->connection->tableExists('_'.$post_type->slug)){
            throw new Exception('Post not found', 404);
        }
        $cache = $this->getDI()->get('modelsCache');
        $cacheKey = $post_type_slug.".".$id;

        $rs = $cache->get($cacheKey);

        if (is_null($rs)) {
            $postTypeMetaFields = self::getPostTypeMetaFields($post_type_slug);
            $postTypeFilterFields = self::getPostTypeFilterFields($post_type_slug);

            $columns_select = [];
            $nr = count($postTypeMetaFields);
            for($i = 0; $i < $nr; $i++){
                $columns_select[] = "pm.".$postTypeMetaFields[$i]." AS meta_".$postTypeMetaFields[$i];
            }

            $n = count($postTypeFilterFields);
            for($x = 0; $x < $n; $x++){
                $columns_select[] = "pf.".$postTypeFilterFields[$x]." AS filter_".$postTypeFilterFields[$x];
            }
            $query = "
                SELECT
                  p.*,
                  ".implode(','.PHP_EOL, $columns_select)."
                FROM
                  _".$post_type_slug." p
                INNER JOIN _".$post_type_slug."_meta pm ON pm.id_post = p.id_post
                INNER JOIN _".$post_type_slug."_filter pf ON pf.id_post = p.id_post
                WHERE
                    p.id_post = '{$id}'
                AND
                    p.id_tipologia_stato = 1
                AND
                    p.data_inizio_pubblicazione < NOW()
                AND
                (
                    p.data_fine_pubblicazione IS NULL 
                    OR
                    p.data_fine_pubblicazione > NOW()
                )
            ";

            $q = $this->connection->query($query);
            $q->setFetchMode(Phalcon\Db::FETCH_OBJ);
            $rs = $q->fetch();
            if(!$rs) throw new Exception('Post not found', 404);

            if(isset($rs->meta_immagine) && !empty($rs->meta_immagine)){
                $rs->immagine = Files::findFirst([
                    'conditions' => 'id = ?1',
                    'bind' => [1 => $rs->meta_immagine],
                    'cache' => [
                        "key" => $cacheKey.'.immagine',
                        "lifetime" => 3600
                    ]
                ]);
            }

            if(isset($rs->meta_immagini_gallery) && !empty($rs->meta_immagini_gallery)){
                $rs->meta_immagini_gallery = Files::find([
                    'conditions' => 'id IN('.$rs->meta_immagini_gallery.') AND attivo = 1',
                    'order' => 'priorita',
                    'cache' => [
                        "key" => $cacheKey.'.immagini_gallery',
                        "lifetime" => 3600
                    ]
                ]);
            }
            $cache->save($cacheKey, $rs, 3600);
            $post = $rs;
        } else {
            $post = $rs;
        }

        if(!$post) throw new Exception('Post not found', 404);

        return $this->response->setJsonContent([
            'content' => $post,
            'post_type' => $post_type
        ]);
    }
}