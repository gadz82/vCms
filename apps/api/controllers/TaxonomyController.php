<?php

/**
 * Created by PhpStorm.
 * User: Francesco
 * Date: 15/04/19
 * Time: 12:48
 */
class TaxonomyController extends ApiController
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function tipologiePostsAction()
    {

        return $this->response->setJsonContent(
            TipologiePost::find([
                'columns'   => 'id, descrizione, slug, ordine',
                'hydration' => \Phalcon\Mvc\Model\Resultset::HYDRATE_ARRAYS,
                'cache'     => [
                    "key"      => "apiTipologiePostsAction",
                    "lifetime" => 36000
                ]
            ])
        );
    }


    public function metaListAction($postTypeId)
    {
        $meta = Meta::find([
            'columns'    => '
                Meta.id AS id_meta,
                Meta.key AS meta_key,
                Meta.label AS meta_label,
                Meta.priorita AS meta_priorita,
                Meta.dataset AS meta_dataset,
                Meta.required AS meta_required,
                Meta.hidden AS meta_hidden,
                Meta.id_tipologia_meta AS meta_id_tipologia_meta,
                tpm.descrizione AS tipologie_meta_descrizione
            ',
            'conditions' => 'Meta.attivo = 1 AND tp.id = :post_type_id:',
            'joins'      => [
                ['TipologieMeta', 'tpm.id = Meta.id_tipologia_meta AND tpm.attivo = 1', 'tpm', 'INNER'],
                ['MetaGroup', 'mg.id = Meta.id_meta_group AND mg.attivo = 1', 'mg', 'INNER'],
                ['MetaGroupPostType', 'mgpt.id_meta_group = mg.id AND mgpt.attivo = 1', 'mgpt', 'INNER'],
                ['TipologiePost', 'tp.id = mgpt.id_tipologia_post AND tp.attivo = 1', 'tp', 'INNER']
            ],
            'group'      => 'Meta.id',
            'hydration'  => \Phalcon\Mvc\Model\Resultset::HYDRATE_ARRAYS,
            'bind'       => [
                'post_type_id' => $postTypeId
            ],
            'cache'      => [
                'key'      => 'apiMetaList' . $postTypeId,
                'lifetime' => 36000
            ]
        ]);

        if (!$meta) return $this->response->setJsonContent([]);

        $nr = count($meta);
        for ($i = 0; $i < $nr; $i++) {
            $meta[$i]['meta_label'] = \apps\api\library\Translation::get($meta[$i]['meta_label']);
            $meta[$i]['meta_dataset'] = \apps\api\library\Translation::get($meta[$i]['meta_dataset']);
            $meta[$i]['tipologie_meta_descrizione'] = \apps\api\library\Translation::get($meta[$i]['tipologie_meta_descrizione']);
        }

        return $this->response->setJsonContent($meta);
    }

    public function filterListAction($postTypeId)
    {
        $filters = Filtri::find([
            'columns'    => '
                Filtri.id AS id_filtro,
                Filtri.key AS filtro_key,
                Filtri.id_filtro_parent AS id_filtro_parent,
                IF(Filtri.id_tipologia_filtro = 1, "O2O","O2M") AS filtro_cardinality,
                Filtri.frontend_filter AS filtro_frontend,
                Filtri.required AS filtro_required,
                Filtri.titolo AS filtro_titolo,
                Filtri.descrizione AS filtro_descrizione,
                Filtri.id_tipologia_filtro AS filtro_id_tipologia_filtro,
                tf.descrizione AS tipologie_filtro_descrizione
            ',
            'conditions' => 'Filtri.id_tipologia_stato = 1 AND Filtri.attivo = 1 AND Filtri.id_applicazione = :id_applicazione: AND tp.id = :post_type_id:',
            'joins'      => [
                ['TipologieFiltro', 'tf.id = Filtri.id_tipologia_filtro AND tf.attivo = 1', 'tf', 'INNER'],
                ['FiltriGroup', 'fg.id = Filtri.id_filtri_group AND fg.attivo = 1', 'fg', 'INNER'],
                ['FiltriGroupPostType', 'fgpt.id_filtri_group = fg.id AND fgpt.attivo = 1', 'fgpt', 'INNER'],
                ['TipologiePost', 'tp.id = fgpt.id_tipologia_post AND tp.attivo = 1', 'tp', 'INNER']
            ],
            'group'      => 'Filtri.id',
            'hydration'  => \Phalcon\Mvc\Model\Resultset::HYDRATE_ARRAYS,
            'bind'       => [
                'post_type_id'    => $postTypeId,
                'id_applicazione' => $this->application
            ],
            'cache'      => [
                'key'      => 'apiFiltriList' . $postTypeId,
                'lifetime' => 36000
            ]
        ]);

        if (!$filters) return $this->response->setJsonContent([]);

        return $this->response->setJsonContent($filters);
    }

    public function filterValuesListAction($idFilter)
    {
        $filtriValori = FiltriValori::find([
            'columns'    => '
                id AS id_filtro_valore,
                id_filtro_valore_parent,
                valore,
                key,
                meta_title,
                meta_description
            ',
            'conditions' => 'attivo = 1 AND id_filtro = :id_filtro:',
            'bind'       => [
                'id_filtro' => $idFilter
            ],
            'cache'      => [
                'key'      => 'apiFiltriValoriList' . $idFilter,
                'lifetime' => 36000
            ]
        ]);

        if (!$filtriValori) return $this->response->setJsonContent([]);

        return $this->response->setJsonContent($filtriValori);
    }

    public function tagListAction()
    {

    }


}